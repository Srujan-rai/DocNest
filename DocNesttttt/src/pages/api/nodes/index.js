// src/pages/api/nodes/index.js
import { db } from "../../../../lib/db.js"; // Ensure this path is correct
import { getUserFromToken, setCorsHeaders } from "../../../../lib/auth.js"; // Ensure this path is correct

export default async function handler(req, res) {
  console.log(`[API /api/nodes] TIMESTAMP: ${new Date().toISOString()} - Received request: ${req.method} ${req.url}`);
  
  if (setCorsHeaders(req, res)) {
    console.log("[API /api/nodes] OPTIONS preflight handled. Exiting.");
    return; 
  }

  console.log("[API /api/nodes] Not an OPTIONS request, proceeding...");

  const currentUser = await getUserFromToken(req);
  if (!currentUser) {
    console.log("[API /api/nodes] Unauthorized access attempt (no valid token or user). Sending 401.");
    return res.status(401).json({ error: "Unauthorized" });
  }
  console.log(`[API /api/nodes] User ${currentUser.email} authenticated for ${req.method} request.`);

  if (req.method === "POST") {
    console.log("[API /api/nodes] Processing POST request with body:", req.body);
    // The 'description' field is received from the client but not used for Node creation
    // as it's not in the Prisma schema for Node.
    const { name, parentId, type } = req.body; 
    // const description = req.body.description; // We can still log it if sent

    if (!name || !type) {
      console.log("[API /api/nodes] Missing name or type in request body. Sending 400.");
      return res.status(400).json({ error: "Name and type are required for a new node." });
    }

    let canCreate = false;
    if (type === "VERTICAL" && (parentId === null || typeof parentId === 'undefined')) {
      canCreate = true; 
      console.log(`[API /api/nodes] User ${currentUser.email} is creating a root VERTICAL. (Current permissive setting - review for production)`);
      // TODO: Implement stricter authorization for creating root VERTICALs if needed.
    } else if (parentId !== null && typeof parentId !== 'undefined') {
      console.log(`[API /api/nodes] Checking permission for user ${currentUser.id} to create node under parent ${parentId}.`);
      const parentAccess = await db.access.findFirst({
        where: { 
          userId: currentUser.id, 
          nodeId: parseInt(parentId), 
          role: { in: ["ADMIN", "EDITOR"] } 
        }
      });
      if (parentAccess) {
        canCreate = true;
        console.log(`[API /api/nodes] User has ${parentAccess.role} access on parent ${parentId}, allowing node creation.`);
      } else {
        console.log(`[API /api/nodes] User does not have ADMIN/EDITOR access on parent ${parentId}.`);
      }
    } else {
        console.log("[API /api/nodes] Invalid combination of type and parentId for creation. Sending 400.");
        return res.status(400).json({ error: "Invalid node type or parentId combination for creation." });
    }

    if (!canCreate) {
      console.log("[API /api/nodes] User does not have permission to create this node. Sending 403.");
      return res.status(403).json({ error: "You do not have permission to create a folder/node here." });
    }

    try {
      // Only include fields that are defined in your Prisma Node schema
      const dataToCreate = {
        name,
        parentId: parentId ? parseInt(parentId) : null,
        type, 
        // 'description' is removed as it's not in the Node schema
        // 'createdBy' is removed as it's not in the Node schema
        // 'createdAt' will be auto-generated by Prisma if @default(now()) is set
      };

      const newNode = await db.node.create({ data: dataToCreate });
      console.log("[API /api/nodes] Node created successfully:", newNode);

      // Automatically grant the creator ADMIN access to the new node
      await db.access.create({
          data: { userId: currentUser.id, nodeId: newNode.id, role: "ADMIN" }
      });
      console.log(`[API /api/nodes] Granted ADMIN access on new node ${newNode.id} to user ${currentUser.id}.`);

      return res.status(201).json(newNode);
    } catch (e) {
      console.error("[API /api/nodes] Error creating node in database:", e);
      if (e.code === 'P2003' && e.meta?.field_name?.includes('parentId')) {
        return res.status(400).json({ error: "Invalid parent folder ID. The specified parent folder does not exist.", details: e.message });
      }
      // Check for other Prisma specific errors if needed
      if (e.name === 'PrismaClientValidationError') {
        console.error("[API /api/nodes] Prisma Validation Error:", e.message);
        return res.status(400).json({ error: "Invalid data for node creation. Please check your input.", details: "Prisma validation failed." });
      }
      return res.status(500).json({ error: "Failed to create node.", details: e.message });
    }
  } else if (req.method === "GET") {
    console.log("[API /api/nodes] GET request received. Not implemented for listing all nodes here. Sending 405.");
    res.setHeader('Allow', ['POST', 'OPTIONS']);
    return res.status(405).json({ error: `Method ${req.method} not implemented for this endpoint. Use /api/tree or /api/nodes/:id for GET.` });
  } else {
    console.log(`[API /api/nodes] Method ${req.method} not allowed. Sending 405.`);
    res.setHeader('Allow', ['POST', 'OPTIONS']);
    return res.status(405).json({ error: `Method ${req.method} Not Allowed on /api/nodes` });
  }
}
